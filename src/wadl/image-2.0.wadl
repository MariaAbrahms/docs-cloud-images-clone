<?xml version="1.0" encoding="UTF-8"?>
<!-- (C) 2012-2013 OpenStack Foundation, All Rights Reserved -->

<!--*******************************************************-->
<!--         Import Common XML Entities                    -->
<!--                                                       -->
<!--     You can resolve the entites with xmllint          -->
<!--                                                       -->
<!--        xmllint -noent os-image-2.0.wadl               -->
<!--*******************************************************-->
<!DOCTYPE application [<!ENTITY % common  SYSTEM "../common/common.ent">
%common;]>

<application xmlns="http://wadl.dev.java.net/2009/02" xmlns:wadl="http://wadl.dev.java.net/2009/02"
    xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:imageapi="http://docs.openstack.org/image/api/v2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:csapi="http://docs.openstack.org/compute/api/v2" xmlns:common="http://docs.openstack.org/common/api/v1.0">
    <grammars>
        <include href="../../src/common/xsd/api.xsd"/>
        <include href="../../src/common/xsd/api-common.xsd"/>
        <include href="../../src/common/xsd/fault.xsd"/>
    </grammars>

    <!--*******************************************************-->
    <!--             All Resources                             -->
    <!--*******************************************************-->
    <resources base="https://glance.example.com/" xml:id="images-v2">
        <resource id="info" path="v2">
            <resource id="Images" path="images">
                <method href="#createImage"/>
                <method href="#listImages"/>
                <resource id="ImageID" path="{image_id}">
                    <param name="image_id" style="template" type="csapi:uuid">
                        <wadl:doc xmlns="http://www.w3.org/1999/xhtml" xml:lang="EN" title="Image ID">
                            <p>Image ID stored through the image API, typically a UUID.</p>
                        </wadl:doc>
                    </param>
                    <method href="#getImage"/>
                    <method href="#updateImage"/>
                    <method href="#deleteImage"/>
                    <resource id="file" path="file">
                        <method href="#storeImageFile"/>
                        <method href="#getImageFile"/>
                    </resource>
                    <resource id="Tags" path="tags">
                        <resource id="Tagstag" path="{tag}">
                            <param name="tag" style="template" type="xsd:string">
                                <wadl:doc xmlns="http://www.w3.org/1999/xhtml" xml:lang="EN" title="Tag">
                                    <p>Image tag.</p>
                                </wadl:doc>
                            </param>
                            <method href="#addImageTag"/>
                            <method href="#deleteImageTag"/>
                        </resource>
                    </resource>
                    <resource id="Members" path="members">
                        <method href="#createImageMember"/>
                        <method href="#listImageMembers"/>
                        <resource id="MemberID" path="{member_id}">
                            <param name="member_id" style="template" type="xsd:string">
                                <wadl:doc xmlns="http://www.w3.org/1999/xhtml" xml:lang="EN" title="Members">
                                    <p>Image member ID. For example, the tenant ID of the user with whom the image is being
                                        shared.</p>
                                </wadl:doc>
                            </param>
                            <method href="#getImageMember"/>
                            <method href="#deleteImageMember"/>
                            <method href="#updateImageMember"/>
                        </resource>
                    </resource>
                </resource>
            </resource>
            <resource id="Tasks" path="tasks">
                <method href="#taskImport"/>
                <method href="#taskExport"/>
                <resource id="TasksLocID" path="{locationID}">
                    <param name="location_id" style="template" type="csapi:uuid">
                        <wadl:doc xmlns="http://www.w3.org/1999/xhtml" xml:lang="EN" title="Location ID">
                            <p>The location of the task resource, typically a UUID, which can be polled to get the status of
                                the task progress. The location is provided as the result of an import or export task
                                operation.</p>
                        </wadl:doc>
                    </param>
                    <method href="#taskStatus"/>
                </resource>
            </resource>
        </resource>
    </resources>

    <!--*******************************************************-->
    <!--               All Methods                             -->
    <!--*******************************************************-->

    <!-- Image Operations -->
    <!--Create Image -->
    <method name="POST" id="createImage">
        <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook" title="Create Image">
            <para role="shortdesc">Creates a virtual machine (VM) image. </para>
            <para>This operation creates an image with a Location header that contains the newly-created URI for the image.
                The response body represents the created image entity.</para>
        </wadl:doc>
        <request>
            <representation mediaType="application/json" element="image">
                <doc xml:lang="EN">
                    <xsdxt:sample>
                        <xsdxt:code href="../common/samples/image-create-req.json"/>
                    </xsdxt:sample>
                </doc>
                <param name="name" style="plain" type="xsd:string" required="true" path="$.name">
                    <wadl:doc xmlns="http://www.w3.org/1999/xhtml" xml:lang="EN" title="Images name">
                        <p>Name for the image. The name of an image is not unique to an image node, because the API does not
                            expect users to know the names of images owned by others.</p>
                    </wadl:doc>
                </param>
                <param name="id" style="plain" type="csapi:uuid" required="false" path="$.id">
                    <wadl:doc xmlns="http://www.w3.org/1999/xhtml" xml:lang="EN" title="Image ID">
                        <p>The image ID.</p>
                    </wadl:doc>
                </param>
                <param name="visibility" style="plain" type="xsd:string" required="false">
                    <wadl:doc xmlns="http://www.w3.org/1999/xhtml" xml:lang="EN" title="Visibility">
                        <p>Image visibility. Valid values are <code>public</code> or <code>private</code>. The default is
                                <code>public</code>.</p>
                    </wadl:doc>
                </param>
                <param name="tags" style="plain" type="xsd:dict" required="false" path="$.tags">
                    <wadl:doc xmlns="http://www.w3.org/1999/xhtml" xml:lang="EN" title="Tags">
                        <p>Image tags.</p>
                    </wadl:doc>
                </param>
            </representation>
        </request>
        <response status="201">
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN">
                    <para> The response is created with a Location header that contains the newly created URI for the image.
                        The response body represents the created image entity. </para>
                    <xsdxt:sample>
                        <xsdxt:code href="../common/samples/image-create-response.json"/>
                    </xsdxt:sample>
                </wadl:doc>
            </representation>
        </response> &commonFaults; &postPutFaults; </method>

    <!-- Update Image -->
    <method name="PATCH" id="updateImage">

        <wadl:doc xml:lang="EN" title="Update Image" xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">Updates the specified image. </para>
            <para>This operation updates the image. The request body must conform to the
                    <code>'application/openstack-images-v2.1-json-patch'</code> media type:</para>
            <para>You can use the <code>HTTP PATCH</code> method to update existing properties, and to add or to remove
                custom user-defined properties image properties. For more information, see <xref linkend="patch-method"/> in
                the Concepts chapter of this &CImA; guide.</para>
            <warning>
                <para> This version of the &CImA; acknowledges the ability of a cloud provider to employ <literal>property
                        protections</literal>. Thus, there may be image properties that may not be updated or deleted by
                    non-admin users. </para>
            </warning>
        </wadl:doc>
        <request>
            <representation mediaType="application/json" element="image">
                <doc xml:lang="EN">
                    <xsdxt:sample>
                        <xsdxt:code href="../common/samples/image-update-req.json"/>
                    </xsdxt:sample>
                </doc>
                <!--this is not an inclusive list of possible params, so leaving it out for now-->
                <!--                <param name="name" style="plain" type="xsd:string" required="false" path="$.name">
                    <wadl:doc xmlns="http://www.w3.org/1999/xhtml" xml:lang="EN" title="Images name">
                        <p>Name for the image. The name of an image is not unique to a Cloud Images node. The API cannot
                            expect users to know the names of images owned by others.</p>
                    </wadl:doc>
                </param>
                <param name="id" style="plain" type="csapi:uuid" required="false" path="$.id">
                    <wadl:doc xmlns="http://www.w3.org/1999/xhtml" xml:lang="EN" title="Image ID">
                        <p>The image ID.</p>
                    </wadl:doc>
                </param>
                <param name="visibility" style="plain" type="xsd:string" required="false" path="$.visibility">
                    <wadl:doc xmlns="http://www.w3.org/1999/xhtml" xml:lang="EN" title="Visibility">
                        <p>Image visibility. Valid values are <code>public</code> and <code>private</code>. The default is
                                <code>public</code>.</p>
                    </wadl:doc>
                </param>
                <param name="tags" style="plain" type="xsd:dict" required="false" path="$.tags">
                    <wadl:doc xmlns="http://www.w3.org/1999/xhtml" xml:lang="EN" title="Tags">
                        <p>Image tags.</p>
                    </wadl:doc>
                </param>-->
            </representation>
        </request>
        <response status="200">
            <representation mediaType="application/json">
                <doc xml:lang="EN">
                    <xsdxt:sample>
                        <xsdxt:code href="../common/samples/image-update-response.json"/>
                    </xsdxt:sample>
                </doc>
            </representation>
        </response> &commonFaults; &postPutFaults; </method>

    <!-- Get Image -->
    <method name="GET" id="getImage">
        <wadl:doc xml:lang="EN" title="Get Image Details" xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">Gets the details for the specified image. </para>
            <para>This operation shows the details for the image. The response body is a single image entity.</para>
        </wadl:doc>
        <response status="200">
            <representation mediaType="application/json">
                <doc xml:lang="EN">
                    <xsdxt:sample>
                        <xsdxt:code href="../common/samples/image-details-response.json"/>
                    </xsdxt:sample>
                </doc>
            </representation>
        </response> &commonFaults; &getFaults; </method>

    <!-- List Images -->
    <method name="GET" id="listImages">
        <wadl:doc xml:lang="EN" title="List Images" xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">Lists public virtual machine (VM) images.</para>
            <para>This operation returns images you created, shared images that you accepted, and standard images. For more
                information about standard images, see <xref linkend="stdvnon-images"/>. </para>
            <para> This operation returns a subset of the larger collection of images and a link that you can use to get the
                next set of images. Always check for the presence of a <parameter>next</parameter> link and use it as the URI
                in a subsequent &GET; request. Follow this pattern until a <parameter>next</parameter> link is no longer
                provided. The next link preserves any query parameters that you send in your initial request. You can use the
                    <parameter>first</parameter> link to jump back to the first page of the collection. If you prefer to
                paginate through images manually, use the <parameter>limit</parameter> and <parameter>marker</parameter>
                parameters. </para>
            <para>The List Images operation accepts several types of query parameters that you can use to filter the results
                of the returned collection. </para>
            <para>A client can provide direct comparison filters by using most image attributes, such as
                    <code>name=Ubuntu</code>, <code>visibility=public</code>, and so on. A client cannot filter on tags or
                anything defined as a link in the json-schema, such as <parameter>self</parameter>,
                    <parameter>file</parameter>, or <parameter>schema</parameter>. </para>
            <para>You can use the <parameter>size_min</parameter> and <parameter>size_max</parameter> query parameters to
                perform greater-than and less-than filtering of images based on their <parameter>size</parameter> attribute.
                The size is measured in bytes and refers to the size of an image when it is stored on disk.</para>
            <para>For example, sending a <parameter>size_min</parameter> filter of 1048576 and size_max of 4194304 filters
                the container to include only images that are between 1 MB and 4 MB in size.</para>
            <para>You can sort the results of this operation by using the <parameter>sort_key</parameter> and
                    <parameter>sort_dir</parameter> parameters. The API uses the natural sorting of whatever image attribute
                is provided as the <parameter>sort_key</parameter>. </para>
            <note>
                <para>Public images may reach end-of-life and be removed from the base image list. This
                    <link xlink:href="http://www.rackspace.com/knowledge_center/article/hidden-base-images">
                        Hidden Base Images article</link>
                    contains images which have been removed from the base images list but which may still be
                    available.</para>
            </note>
        </wadl:doc>
        <request>
            <param name="limit" style="query" required="false" type="xsd:string">
                <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook">
                    <para>Requests a specific page size. Expect a response to a limited request to return between zero items
                        and the number specified. The typical pattern for using the <parameter>limit</parameter> and
                            <parameter>marker</parameter> parameters is to make an initial limited request and then to use
                        the ID of the last image from the response as the <parameter>marker</parameter> parameter in a
                        subsequent limited request.</para>
                </wadl:doc>
            </param>
            <param name="marker" style="query" required="false" type="xsd:string">
                <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook">
                    <para>Specifies the ID of the last-seen image. The typical pattern for using the
                            <parameter>limit</parameter> and <parameter>marker</parameter> parameters is to make an initial
                        limited request and then to use the ID of the last image from the response as the
                            <parameter>marker</parameter> parameter in a subsequent limited request.</para>
                </wadl:doc>
            </param>
            <param name="name" style="query" required="false" type="xsd:string">
                <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook">
                    <para>Filter parameter that specifies the name of the image as a string.</para>
                </wadl:doc>
            </param>
            <param name="visibility" style="query" required="false" type="imageapi:string">
                <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook">
                    <para>Filter parameter that specifies image visibility as either <code>public</code> or
                            <code>private</code>.</para>
                </wadl:doc>
            </param>
            <param name="member_status" style="query" required="false" type="imageapi:string">
                <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook">
                    <para>Filter parameter that shows images with the specified member status. Valid values are
                            <code>accepted</code>, <code>pending</code>, <code>rejected</code>, and <code>all</code>. The
                        default is <code>accepted</code>.</para>
                </wadl:doc>
            </param>
            <param name="owner" style="query" required="false" type="imageapi:string">
                <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook">
                    <para>Filter parameter that shows images shared with me by the specified tag.</para>
                </wadl:doc>
            </param>
            <param name="tag" style="query" required="false" type="imageapi:string">
                <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook">
                    <para>Filter parameter that shows images with the specified tag, where the owner is indicated by tenant
                        ID.</para>
                </wadl:doc>
            </param>
            <param name="status" style="query" required="false" type="xsd:int">
                <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook">
                    <para>Filter parameter that species the image status as <code>queued</code>, <code>saving</code>,
                            <code>active</code>, <code>killed</code>, <code>deleted</code>, or
                        <code>pending_delete</code>.</para>
                </wadl:doc>
            </param>
            <param name="size_min" style="query" required="false" type="xsd:string" default="ALL">
                <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook">
                    <para>Filter parameter that specifies the minimum size of the image in bytes.</para>
                </wadl:doc>
            </param>
            <param name="size_max" style="query" required="false" type="xsd:string" default="ALL">
                <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook">
                    <para>Filter parameter that specifies the maximum size of the image in bytes.</para>
                </wadl:doc>
            </param>
            <param name="sort_key" style="query" required="false" type="xsd:string" default="ALL">
                <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook">
                    <para>Sort key. All image attributes can be used as the sort key, except <code>tags</code> and
                            <code>link</code> attributes. The default is <code>created_at</code>.</para>
                </wadl:doc>
            </param>
            <param name="sort_dir" style="query" required="false" type="xsd:string" default="ALL">
                <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook">
                    <para>Sort direction. Valid values are <code>asc</code> (ascending) and <code>desc</code> (descending).
                        The default is <code>desc</code>.</para>
                </wadl:doc>
            </param>
        </request>
        <response status="200">
            <representation mediaType="application/json">
                <doc xml:lang="EN">
                    <xsdxt:sample>
                        <xsdxt:code href="../common/samples/image-list-response.json"/>
                    </xsdxt:sample>
                </doc>
            </representation>
        </response>&commonFaults; &getFaults; </method>

    <!-- Delete Image -->
    <method name="DELETE" id="deleteImage">
        <wadl:doc xml:lang="EN" title="Delete Image" xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">Deletes the specified image. </para>
            <para>This operation deletes the image. Make sure you set <parameter>protected</parameter> parameter to false
                (Boolean) before performing the delete. If the operation succeeds, it returns an <errorcode>HTTP
                    204</errorcode> status code with no response body. </para>
            <warning><para>An attempt to delete an image with the <parameter>protected</parameter> parameter set to
                        <code>true</code> (boolean) results in a response code <errorcode>HTTP 403</errorcode>.</para>
            </warning>
        </wadl:doc>
        <response status="204"/> &commonFaults; </method>

    <!-- Image File Operations -->
    <!-- Upload Image -->
    <method name="PUT" id="storeImageFile">
        <wadl:doc xml:lang="EN" title="Upload Binary Image Data" xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">Uploads binary image data. </para>
            <para>This operation uploads the binary image data. An image record must exist before a client can store binary
                image data with it. </para>
            <para>Content-Type must be <code>application/octet-stream</code>. The complete request body is stored and is
                accessible in its entirety by issuing a &GET; request to the same URI. </para>
        </wadl:doc>
        <response status="204"/> &commonFaults; &postPutFaults; </method>

    <!-- Download Image -->
    <method name="GET" id="getImageFile">
        <wadl:doc xml:lang="EN" title="Download Binary Image Data" xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">Downloads binary image data.</para>
            <para>This operation downloads the binary image data. The response body contains the raw binary data that
                represents the actual virtual disk. The Content-Type header is <code>application/octet-stream</code>. The
                Content-MD5 header contains an MD5 checksum of the image data. Clients are encouraged to verify the integrity
                of the image data that they receive by using this checksum.</para>
        </wadl:doc>
        <response status="200">
            <wadl:doc xmlns="http://docbook.org/ns/docbook">
                <para>If no image data exists, the response returns <errorcode>HTTP 204</errorcode> status code.</para>
            </wadl:doc>
        </response>&commonFaults; &getFaults; </method>

    <!-- Image Tag Operations -->
    <!-- Add Image Tag -->
    <method name="PUT" id="addImageTag">
        <wadl:doc xmlns="http://www.w3.org/1999/xhtml" xml:lang="EN" title="Add Image Tag">
            <p xmlns="http://www.w3.org/1999/xhtml">Adds the specified tag to the specified image. </p>
            <para>This operation adds the image tag to the image.</para>
        </wadl:doc>
        <response status="200"/> &commonFaults; &postPutFaults; </method>

    <!-- Delete Image Tag -->
    <method name="DELETE" id="deleteImageTag">
        <wadl:doc xml:lang="EN" title="Delete Image Tag" xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">Deletes the specified tag from the specified image. </para>
            <para>This operation deletes the image tag from the image.</para>
        </wadl:doc>
        <response status="204"/> &commonFaults; </method>

    <!-- Image Sharing/Member Operations -->
    <!-- List Image Members -->
    <method name="GET" id="listImageMembers">
        <wadl:doc xml:lang="EN" title="List Image Members" xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">This operation returns collection of members (users) with whom the image has been
                shared.</para>
            <para> If a user with whom this image is shared makes this call, the member list contains only information for
                that user. If a user with whom this image has not been shared makes this call, the response is
                    <errorcode>HTTP 404</errorcode>. </para>
        </wadl:doc>
        <request>
            <representation mediaType="application/json">
                <param name="visibility" style="query" type="xsd:string" required="false">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook"> Filters images on visibility. Options for visibility are
                        as follows: <variablelist>
                            <varlistentry>
                                <term><code>shared</code></term>
                                <listitem>
                                    <para>Shows images that are shared with the user where the member status is
                                            <literal>accepted</literal>.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term><code>private</code></term>
                                <listitem>
                                    <para>Shows images that the user owns.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term><code>public</code></term>
                                <listitem>
                                    <para>Shows images that are public images, published by the cloud provider, and available
                                        to everyone. Public images do not have members.</para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </wadl:doc>
                </param>
                <param name="member_status" style="query" type="xsd:string" required="false">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook"> Filters images on any chosen status. For example,
                            <literal>visibility=shared&amp;member_status=pending</literal> shows only images shared with the
                        user where the member status is <literal>pending</literal>. Options for member_status are as follows: <variablelist>
                            <varlistentry>
                                <term><code>pending</code></term>
                                <listitem>
                                    <para>Shows images where member_status is <literal>pending</literal>.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term><code>accepted</code></term>
                                <listitem>
                                    <para>Shows images where member_status is <literal>accepted</literal>.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term><code>rejected</code></term>
                                <listitem>
                                    <para>Shows images where member_status is <literal>rejected</literal>. </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term><code>all</code></term>
                                <listitem>
                                    <para>Shows images regardless of member_status. </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                        <note><para>The member_status filter is ignored if the visibility parameter is not set to
                                "shared".</para></note>
                    </wadl:doc>
                </param>
                <param name="owner" style="query" type="xsd:string" required="false">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook"> Filters images on acceptance status only. For example,
                            <literal>visibility=shared&amp;owner=&lt;OWNER_ID></literal> shows only images shared with this
                        user by the user whose tenant id is <literal>OWNER_ID</literal>. <note><para>The owner filter is
                                ignored if the visibility parameter is not set to "shared".</para></note>
                    </wadl:doc>
                </param>
            </representation>
        </request>
        <response status="200">
            <representation mediaType="application/json">
                <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/image-members-list-response.json"/>
                </wadl:doc>
            </representation>
        </response>
    </method>

    <!-- Create Image Member -->
    <method name="POST" id="createImageMember">
        <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook" title="Create Image Member">
            <para role="shortdesc">Adds the specified <parameter>account ID/tenant ID</parameter> specified in the request
                body as an image member.</para>
            <para>This operation allows you to add users to the list of members with whom the image is shared. The member
                status of a newly created image member is <literal>pending</literal>.</para>
            <para>If the user making the call is not the image owner, the response is <errorcode>HTTP 404</errorcode>.</para>
        </wadl:doc>
        <request>
            <representation mediaType="application/json">
                <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/image-member-create-request.json"/>
                </wadl:doc>
                <param name="member" style="plain" type="xsd:string" required="true" path="$.member">
                    <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook" title="Image member status">
                        <para>The member ID. This is the tenant ID of the user with whom the image is to be shared.</para>
                    </wadl:doc>
                </param>
            </representation>
        </request>
        <response status="200">
            <representation mediaType="application/json">
                <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/image-member-create-response.json"/>
                </wadl:doc>
            </representation>
        </response> &commonFaults; </method>

    <!-- Get Image Member-->
    <method name="GET" id="getImageMember">
        <wadl:doc xml:lang="EN" title="Get Image Member Details" xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">Gets the details for the specified image member. </para>
            <para>This operation shows details of the image member. To get a successful response, either the image owner must
                make the call or the <parameter>tenant_id</parameter> of the user making the call must match the specified
                    <parameter>member_id</parameter>. Otherwise the response is <errorcode>HTTP 404</errorcode>.</para>
        </wadl:doc>
        <response status="200">
            <representation mediaType="application/json">
                <doc xml:lang="EN">
                    <xsdxt:sample>
                        <xsdxt:code href="../common/samples/image-member-details-response.json"/>
                    </xsdxt:sample>
                </doc>
            </representation>
        </response> &commonFaults; &getFaults; </method>

    <!-- Update Image Member -->
    <method name="PUT" id="updateImageMember">
        <wadl:doc xml:lang="EN" title="Update Image Member" xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">Sets the specified status for the specified member of the specified image.</para>
            <para>This operation updates the image member. If the call is made by the image owner, the response is
                    <errorcode>HTTP 403 (Forbidden)</errorcode>.</para>
            <para>If the call is made by a user who is not the owner and whose <parameter>tenant ID</parameter> is not the
                same as the {member_id} is the operation URI, the response is <errorcode>HTTP 404</errorcode>.</para>
        </wadl:doc>
        <request>
            <representation mediaType="application/json">
                <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/image-member-update-request.json"/>
                </wadl:doc>
                <param name="status" style="plain" type="xsd:string" required="true" path="$.status">
                    <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook" title="Image member status">
                        <para>The status to which this image member should be set. Valid values are as follows: <variablelist>
                                <varlistentry>
                                    <term><code>pending</code></term>
                                    <listitem>
                                        <para>At creation, the member's status is set to pending. The image is not visible in
                                            the member's image-list, but the member can still boot instances from the image.
                                        </para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term><code>accepted</code></term>
                                    <listitem>
                                        <para>The image is visible in the member's image-list. The member can boot instances
                                            from the image. </para>
                                    </listitem>
                                </varlistentry>
                                <varlistentry>
                                    <term><code>rejected</code></term>
                                    <listitem>
                                        <para>The member has decided that he or she does not want to see the image. The image
                                            is not visible in the member's image-list, but the member can still boot
                                            instances from the image. </para>
                                    </listitem>
                                </varlistentry>
                            </variablelist>
                        </para>
                    </wadl:doc>
                </param>
            </representation>
        </request>
        <response status="200">
            <representation mediaType="application/json">
                <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/image-member-update-response.json"/>
                </wadl:doc>
            </representation>
        </response> &commonFaults; </method>

    <!-- Delete Image Member -->
    <method name="DELETE" id="deleteImageMember">
        <wadl:doc xml:lang="EN" title="Delete Image Member" xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">Deletes the specified <parameter>account ID/tenant ID</parameter> from the member list of
                the specified image.</para>
            <para>This operation deletes the image member from the image. This call, which can only be made by the image
                owner, removes users from the list of members who have access to a shared image.</para>
            <para>If the <parameter>{member_id}</parameter> is not a member of the specified image, the response is
                    <errorcode>HTTP 404</errorcode></para>
        </wadl:doc>
        <response status="204"/> &commonFaults; </method>

    <!-- Task Operations -->
    <!-- Import Task -->
    <method name="POST" id="taskImport">
        <wadl:doc xml:lang="EN" title="Import Task" xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">Submits a task request to import an image.</para>
            <para>This operation submits an task request to import an image. The request begins the import process and
                returns the location of the task resource that can be subsequently polled to determine the status of the
                import. For more information on the polling operation, see
                <link xlink:href="POST_taskStatus_v2_tasks__locationID__Image_Task_Calls.html"/>.</para>
            <note>
                <para> As described in the
                    <link xlink:href="http://docs.rackspace.com/images/api/v2/ci-devguide/content/ch_image-service-dev-overview.html">Rackspace Terms of Service</link>,
                    you should be aware of and respect all licensing restrictions that apply to any software that you import
                    into the Rackspace open cloud. In particular, be aware that Microsoft licensing rules are very
                    restrictive. If you have questions, please contact the software vendor. </para>
            </note>
        </wadl:doc>
        <request>
            <representation mediaType="application/json">
                <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/task-import-req.json"/>
                </wadl:doc>
                <param name="type" style="plain" type="xsd:string" required="true" path="$.type">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The type of the task. Use <code>import</code> for task
                        imports.</wadl:doc>
                </param>
                <param name="import_from" style="plain" type="xsd:string" required="true" path="$.import_from">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The source of the task to be imported.</wadl:doc>
                </param>
                <param name="import_from_format" style="plain" type="xsd:string" required="true" path="$.import_from_format">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The format of the task to be imported. The standard
                        format is qcow2, but your cloud provider may allow other formats.</wadl:doc>
                </param>
                <param name="name" style="plain" type="xsd:string" required="true" path="$.name">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The name of the task (image) to be imported.</wadl:doc>
                </param>
                <param name="tags" style="plain" type="xsd:string" required="false" path="$.import_from">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The tags for the task to be imported.</wadl:doc>
                </param>
            </representation>
        </request>
        <response status="201">
            <param name="location_id" style="header" type="xsd:string" required="true" path="$.location_id">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">The location of the task resource that is needed for polling
                    the progress of the import request.</wadl:doc>
            </param>
        </response>
    </method>

    <!-- Export Task -->
    <method name="POST" id="taskExport">
        <wadl:doc xml:lang="EN" title="Export Task" xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">Submits a task request to export an image.</para>
            <para>This operation submits an task request to export an image. The request begins the export process and
                returns the location of the task resource that can be subsequently polled to determine the status of the
                export. For more information on the polling operation, see
                <link xlink:href="POST_taskStatus_v2_tasks__locationID__Image_Task_Calls.html"/>.</para>
            <note>
                <para>The exported image is deposited in your Cloud Files account, staying in the Rackspace open cloud. You
                    are responsible for ensuring that any distribution of your image from the Rackspace open cloud complies
                    with any licensing restrictions.</para>
            </note>
        </wadl:doc>
        <request>
            <representation mediaType="application/json">
                <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/task-export-req.json"/>
                </wadl:doc>
                <param name="type" style="plain" type="xsd:string" required="true" path="$.type">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The type of the task. Use <code>export</code> for task
                        exports.</wadl:doc>
                </param>
                <param name="export_uuid" style="plain" type="xsd:string" required="true" path="$.export_uuid">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The unique identifier of the task to be
                        exported.</wadl:doc>
                </param>
                <param name="export_to" style="plain" type="xsd:string" required="true" path="$.export_to">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The destination of the task to be exported.</wadl:doc>
                </param>
                <param name="export_format" style="plain" type="xsd:string" required="true" path="$.export_format">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The format of the task to be exported.</wadl:doc>
                </param>
            </representation>
        </request>
        <response status="201">
            <param name="location_id" style="header" type="xsd:string" required="true" path="$.location_id">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">The location of the task resource that is needed for polling
                    the progress of the export request.</wadl:doc>
            </param>
        </response>
    </method>

    <!-- Task Status -->
    <method name="POST" id="taskStatus">
        <wadl:doc xml:lang="EN" title="Poll for Status of Task" xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">This operation returns status of task import or export.</para>
            <para>When you submit a task import or export request, the &CImS; creates a task resource to manage the request
                and returns the location of that task resource. This operation allows you to poll the task resource to find
                the status of the request, using the location of the task resource. Ultimately, the poll request returns the
                location of the image (if the request succeeds) or an error message (if it fails).</para>
        </wadl:doc>
        <response status="200">
            <!--import pending-->
            <representation mediaType="application/json">
                <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook" title="Import Task - Pending Response">
                    <xsdxt:code href="../common/samples/task-import-pending-response.json"/>
                </wadl:doc>
                <param name="type" style="plain" type="xsd:string" required="true" path="$.type">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The type of the task: <code>import</code> for task
                        imports.</wadl:doc>
                </param>
                <param name="status" style="plain" type="xsd:string" required="true" path="$.status">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The status of the task: <code>processing</code> while
                        task is in progress.</wadl:doc>
                </param>
                <param name="expires_at" style="plain" type="xsd:string" required="true" path="$.expires_at">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The date and time that the task resource expires.
                                <note><para>Even after the task resource expires (and is thus no longer available to be
                                polled), the result of the task (such as an imported image) still exists.</para></note>
                    </wadl:doc>
                </param>
                <param name="import_from" style="plain" type="xsd:string" required="true" path="$.import_from">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">(For import tasks) The source of the imported
                        task.</wadl:doc>
                </param>
                <param name="import_from_format" style="plain" type="xsd:string" required="true" path="$.import_from_format">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">(For import tasks) The format of the imported
                        task.</wadl:doc>
                </param>
                <param name="name" style="plain" type="xsd:string" required="true" path="$.name">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">(For import tasks) The name of the imported
                        task.</wadl:doc>
                </param>
                <param name="tags" style="plain" type="xsd:string" required="false" path="$.tags">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">(For import tasks) The tags for the imported
                        task.</wadl:doc>
                </param>
            </representation>
            <!--import success-->
            <representation mediaType="application/json">
                <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook" title="Import Task - Success Response">
                    <xsdxt:code href="../common/samples/task-import-success-response.json"/>
                </wadl:doc>
                <param name="type" style="plain" type="xsd:string" required="true" path="$.type">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The type of the task: <code>import</code> for task
                        imports.</wadl:doc>
                </param>
                <param name="status" style="plain" type="xsd:string" required="true" path="$.status">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The status of the task: <code>success</code> if task
                        action worked.</wadl:doc>
                </param>
                <param name="expires_at" style="plain" type="xsd:string" required="true" path="$.expires_at">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The date and time that the task resource expires.
                                <note><para>Even after the task resource expires (and is thus no longer available to be
                                polled), the result of the task (such as an imported image) still exists.</para></note>
                    </wadl:doc>
                </param>
                <param name="id" style="plain" type="xsd:string" required="true" path="$.id">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The id of the task.</wadl:doc>
                </param>
                <param name="image_uuid" style="plain" type="xsd:string" required="false" path="$.image_uuid">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">(For successful import tasks) The unique identifier of
                        the imported task.</wadl:doc>
                </param>
                <param name="import_from" style="plain" type="xsd:string" required="true" path="$.import_from">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">(For import tasks) The source of the imported
                        task.</wadl:doc>
                </param>
                <param name="import_from_format" style="plain" type="xsd:string" required="true" path="$.import_from_format">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">(For import tasks) The format of the imported
                        task.</wadl:doc>
                </param>
                <param name="name" style="plain" type="xsd:string" required="true" path="$.name">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">(For import tasks) The name of the imported
                        task.</wadl:doc>
                </param>
                <param name="tags" style="plain" type="xsd:string" required="false" path="$.tags">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">(For import tasks) The tags for the imported
                        task.</wadl:doc>
                </param>
            </representation>
            <!--import failure-->
            <representation mediaType="application/json">
                <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook" title="Import Task - Failure Response">
                    <xsdxt:code href="../common/samples/task-import-failure-response.json"/>
                </wadl:doc>
                <param name="type" style="plain" type="xsd:string" required="true" path="$.type">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The type of the task: <code>import</code> for task
                        imports.</wadl:doc>
                </param>
                <param name="status" style="plain" type="xsd:string" required="true" path="$.status">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The status of the task: <code>failure</code> if task
                        action failed.</wadl:doc>
                </param>
                <param name="expires_at" style="plain" type="xsd:string" required="true" path="$.expires_at">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The date and time that the task resource expires.
                                <note><para>Even after the task resource expires (and is thus no longer available to be
                                polled), the result of the task (such as an imported image) still exists.</para></note>
                    </wadl:doc>
                </param>
                <param name="id" style="plain" type="xsd:string" required="true" path="$.id">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The id of the task.</wadl:doc>
                </param>
                <param name="message" style="plain" type="xsd:string" required="false" path="$.message">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">(For failed tasks) The reason why the task import or
                        export failed.</wadl:doc>
                </param>
                <param name="import_from" style="plain" type="xsd:string" required="true" path="$.import_from">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">(For import tasks) The source of the imported
                        task.</wadl:doc>
                </param>
                <param name="import_from_format" style="plain" type="xsd:string" required="true" path="$.import_from_format">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">(For import tasks) The format of the imported
                        task.</wadl:doc>
                </param>
                <param name="name" style="plain" type="xsd:string" required="true" path="$.name">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">(For import tasks) The name of the imported
                        task.</wadl:doc>
                </param>
                <param name="tags" style="plain" type="xsd:string" required="false" path="$.tags">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">(For import tasks) The tags for the imported
                        task.</wadl:doc>
                </param>
            </representation>
            <!--export pending-->
            <representation mediaType="application/json">
                <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook" title="Export Task - Pending Response">
                    <xsdxt:code href="../common/samples/task-export-pending-response.json"/>
                </wadl:doc>
                <param name="type" style="plain" type="xsd:string" required="true" path="$.type">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The type of the task: <code>export</code> for task
                        exports.</wadl:doc>
                </param>
                <param name="status" style="plain" type="xsd:string" required="true" path="$.status">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The status of the task: <code>pending</code> while task
                        is in progress</wadl:doc>
                </param>
                <param name="id" style="plain" type="xsd:string" required="true" path="$.id">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The id of the task.</wadl:doc>
                </param>
                <param name="export_uuid" style="plain" type="xsd:string" required="false" path="$.export_uuid">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">(For export tasks) The unique identifier of the exported
                        task.</wadl:doc>
                </param>
                <param name="export_to" style="plain" type="xsd:string" required="false" path="$.export_to">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">(For export tasks) The destination of the exported
                        task.</wadl:doc>
                </param>
                <param name="export_format" style="plain" type="xsd:string" required="false" path="$.export_format">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">(For export tasks) The format of the exported
                        task.</wadl:doc>
                </param>
            </representation>
            <!--export success-->
            <representation mediaType="application/json">
                <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook" title="Export Task - Success Response">
                    <xsdxt:code href="../common/samples/task-export-success-response.json"/>
                </wadl:doc>
                <param name="type" style="plain" type="xsd:string" required="true" path="$.type">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The type of the task: <code>export</code> for task
                        exports.</wadl:doc>
                </param>
                <param name="status" style="plain" type="xsd:string" required="true" path="$.status">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The status of the task: <code>success</code> if task
                        action worked.</wadl:doc>
                </param>
                <param name="expires_at" style="plain" type="xsd:string" required="true" path="$.expires_at">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The date and time that the task resource expires.
                                <note><para>Even after the task resource expires (and is thus no longer available to be
                                polled), the result of the task (such as an imported image) still exists.</para></note>
                    </wadl:doc>
                </param>
                <param name="id" style="plain" type="xsd:string" required="true" path="$.id">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The id of the task.</wadl:doc>
                </param>
                <param name="export_location" style="plain" type="xsd:string" required="false" path="$.export_location">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">(For successful export tasks) The location of the
                        exported task.</wadl:doc>
                </param>
                <param name="export_uuid" style="plain" type="xsd:string" required="false" path="$.export_uuid">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">(For export tasks) The unique identifier of the exported
                        task.</wadl:doc>
                </param>
                <param name="export_to" style="plain" type="xsd:string" required="false" path="$.export_to">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">(For export tasks) The destination of the exported
                        task.</wadl:doc>
                </param>
                <param name="export_format" style="plain" type="xsd:string" required="false" path="$.export_format">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">(For export tasks) The format of the exported
                        task.</wadl:doc>
                </param>
            </representation>
            <!--export failure-->
            <representation mediaType="application/json">
                <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook" title="Export Task - Failure Response">
                    <xsdxt:code href="../common/samples/task-export-failure-response.json"/>
                </wadl:doc>
                <param name="type" style="plain" type="xsd:string" required="true" path="$.type">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The type of the task: <code>export</code> for task
                        exports.</wadl:doc>
                </param>
                <param name="status" style="plain" type="xsd:string" required="true" path="$.status">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The status of the task: <code>failure</code> if task
                        action failed.</wadl:doc>
                </param>
                <param name="expires_at" style="plain" type="xsd:string" required="true" path="$.expires_at">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The date and time that the task resource expires.
                                <note><para>Even after the task resource expires (and is thus no longer available to be
                                polled), the result of the task (such as an imported image) still exists.</para></note>
                    </wadl:doc>
                </param>
                <param name="id" style="plain" type="xsd:string" required="true" path="$.id">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">The id of the task.</wadl:doc>
                </param>
                <param name="message" style="plain" type="xsd:string" required="false" path="$.message">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">(For failed tasks) The reason why the task import or
                        export failed.</wadl:doc>
                </param>
                <param name="export_uuid" style="plain" type="xsd:string" required="false" path="$.export_uuid">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">(For export tasks) The unique identifier of the exported
                        task.</wadl:doc>
                </param>
                <param name="export_to" style="plain" type="xsd:string" required="false" path="$.export_to">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">(For export tasks) The destination of the exported
                        task.</wadl:doc>
                </param>
                <param name="export_format" style="plain" type="xsd:string" required="false" path="$.export_format">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">(For export tasks) The format of the exported
                        task.</wadl:doc>
                </param>
            </representation>
        </response>&commonFaults; </method>
</application>
