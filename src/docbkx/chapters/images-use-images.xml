<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE application [<!ENTITY % common  SYSTEM "../../common/common.ent">
%common;]>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="using-images">
    <title>Using images</title>
    <para>The &CImS; provides basic operations for managing images, such as listing and updating images. You can also use
        tasks to import images to and export images from your Cloud Files account. To learn more about the fundamentals of
        image tasks, see <olink targetdoc="ci-gettingstarted" targetptr="image-tasks">“Asynchronous image
        tasks”</olink>.</para>
    <para>To help you get started exploring Cloud Images, the following examples show some basic image operations with cURL
        examples:</para>
    <itemizedlist>
        <listitem>
            <para><olink targetdoc="ci-gettingstarted" targetptr="list-images">“List images”</olink></para>
        </listitem>
        <listitem>
            <para><olink targetdoc="ci-gettingstarted" targetptr="get-image-details">“Get details for an
                image”</olink></para>
        </listitem>
        <listitem>
            <para><olink targetdoc="ci-gettingstarted" targetptr="update-image">“Update an image”</olink></para>
        </listitem>
        <listitem>
            <para><olink targetdoc="ci-gettingstarted" targetptr="import-image">“Import an image by using
                tasks”</olink></para>
        </listitem>
        <listitem>
            <para><olink targetdoc="ci-gettingstarted" targetptr="export-image">“Export an image by using
                tasks”</olink></para>
        </listitem>
        <listitem>
            <para><olink targetdoc="ci-gettingstarted" targetptr="get-task-details">“Get details for a task”</olink></para>
        </listitem>
    </itemizedlist>
    <section xml:id="list-images" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
        xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
        <title>List images</title>
        <para>To find out what images are available, list them.</para>
        <procedure>
            <title>To list images with cURL</title>
            <step>
                <para>Issue the following cURL command:</para>
                <programlisting>
curl -s https://iad.images.api.rackspacecloud.com/v2/$account/images -H "X-Auth-Token: $token" |python -m json.tool
                </programlisting>
                <para><emphasis role="bold">Options:</emphasis>
                    <itemizedlist>
                        <listitem>
                            <para><emphasis role="bold">-s</emphasis>: Runs the command in silent mode.</para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">-H</emphasis>: Specified header information. In this case, it
                                provides the authentication token. If you previously exported the token environment variable
                                as instructed in <olink targetdoc="ci-gettingstarted" targetptr="export_env_vars">“Exporting
                                    environment variables”</olink>, you can use the $token variable. Otherwise, substitute
                                your actual token for the variable.</para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">-m json.tool</emphasis>: Specifies json.tool, which pretty-prints the
                                JSON output. For more information about json.tool, see <olink targetdoc="ci-gettingstarted"
                                    targetptr="json_tool">json.tool</olink>.</para>
                        </listitem>
                    </itemizedlist>
                </para>
                <para>The command returns an array of images. The details for the Ubuntu 12.04 image within the array are
                    shown in following example, with other images removed for brevity.</para>
                <example>
                    <title>List images with cURL response</title>
                    <programlisting language="json">
{
   "images":
   [
      {
        "auto_disk_config": "disabled",
        "cache_in_nova": "True",
        "checksum": "acd9be13a17af33ec8f66ac5b1afc44a",
        "com.rackspace__1__build_core": "1",
        "com.rackspace__1__build_managed": "1",
        "com.rackspace__1__build_rackconnect": "1",
        "com.rackspace__1__options": "0",
        "com.rackspace__1__platform_target": "PublicCloud",
        "com.rackspace__1__release_build_date": "2014-03-19_10-50-10",
        "com.rackspace__1__release_id": "1003",
        "com.rackspace__1__release_version": "3",
        "com.rackspace__1__source": "kickstart",
        "com.rackspace__1__visible_core": "1",
        "com.rackspace__1__visible_managed": "0",
        "com.rackspace__1__visible_rackconnect": "1",
        "container_format": "ovf",
        "created_at": "2014-03-19T16:28:33Z",
        "disk_format": "vhd",
        "file": "/v2/images/c9c7732f-5129-4930-a835-3781255fb1e2/file",
        "id": "c9c7732f-5129-4930-a835-3781255fb1e2",
        "image_type": "base",
        "min_disk": 20,
        "min_ram": 512,
        "name": "Ubuntu 12.04 LTS (Precise Pangolin) (PVHVM)",
        "org.openstack__1__architecture": "x64",
        "org.openstack__1__os_distro": "com.ubuntu",
        "org.openstack__1__os_version": "12.04",
        "os_distro": "ubuntu",
        "os_type": "linux",
        "protected": false,
        "schema": "/v2/schemas/image",
        "self": "/v2/images/c9c7732f-5129-4930-a835-3781255fb1e2",
        "size": 647449489,
        "status": "active",
        "tags": [],
        "updated_at": "2014-03-26T21:44:54Z",
        "visibility": "public",
        "vm_mode": "hvm"
     }
   ],
   "next": "/v2/images?marker=c9c7732f-5129-4930-a835-3781255fb1e2",
   "schema": "/v2/schemas/images"
}
                    </programlisting>
                </example>
            </step>
            <step>
                <para>Copy the image ID of the image that you want to use. Find the image ID in the <literal>id</literal>
                    field of the output. In this example, the <literal>id</literal> of the Ubuntu 12.04 image is
                        <literal>c9c7732f-5129-4930-a835-3781255fb1e2</literal>.</para>
            </step>
        </procedure>
    </section>
    <section xml:id="get-image-details" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
        xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
        <title>Get details for an image</title>
        <para>If you need to see any additional details about an image, get the details for that image.</para>
        <procedure>
            <title>To get details for an image with cURL</title>
            <step>
                <para>Issue the following cURL command to get details for the Ubuntu 12.04 image, using the image ID that you
                    got from the <olink targetdoc="ci-gettingstarted" targetptr="list-images">“List Images”</olink>
                    command.</para>
                <programlisting>
curl -s https://iad.images.api.rackspacecloud.com/v2/$account/images/c9c7732f-5129-4930-a835-3781255fb1e2 \
-H "X-Auth-Token: $token" |python -m json.tool
                </programlisting>
                <para><emphasis role="bold">Options:</emphasis>
                    <itemizedlist>
                        <listitem>
                            <para><emphasis role="bold">-s</emphasis>: Runs the command in silent mode.</para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">-H</emphasis>: Specified header information. In this case, it
                                provides the authentication token. If you previously exported the token environment variable
                                as instructed in <olink targetdoc="ci-gettingstarted" targetptr="export_env_vars">“Exporting
                                    environment variables”</olink>, you can use the $token variable. Otherwise, substitute
                                your actual token for the variable.</para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">-m json.tool</emphasis>: Specifies json.tool, which pretty-prints the
                                JSON output. For more information about json.tool, see <olink targetdoc="ci-gettingstarted"
                                    targetptr="json_tool">json.tool</olink>.</para>
                        </listitem>
                    </itemizedlist>
                </para>
                <para>The command returns the following response.</para>
                <example>
                    <title>Get details for an image with cURL response</title>
                    <programlisting language="json">
{
    "auto_disk_config": "disabled",
    "cache_in_nova": "True",
    "checksum": "acd9be13a17af33ec8f66ac5b1afc44a",
    "com.rackspace__1__build_core": "1",
    "com.rackspace__1__build_managed": "1",
    "com.rackspace__1__build_rackconnect": "1",
    "com.rackspace__1__options": "0",
    "com.rackspace__1__platform_target": "PublicCloud",
    "com.rackspace__1__release_build_date": "2014-03-19_10-50-10",
    "com.rackspace__1__release_id": "1003",
    "com.rackspace__1__release_version": "3",
    "com.rackspace__1__source": "kickstart",
    "com.rackspace__1__visible_core": "1",
    "com.rackspace__1__visible_managed": "0",
    "com.rackspace__1__visible_rackconnect": "1",
    "container_format": "ovf",
    "created_at": "2014-03-19T16:28:33Z",
    "disk_format": "vhd",
    "file": "/v2/images/c9c7732f-5129-4930-a835-3781255fb1e2/file",
    "id": "c9c7732f-5129-4930-a835-3781255fb1e2",
    "image_type": "base",
    "min_disk": 20,
    "min_ram": 512,
    "name": "Ubuntu 12.04 LTS (Precise Pangolin) (PVHVM)",
    "org.openstack__1__architecture": "x64",
    "org.openstack__1__os_distro": "com.ubuntu",
    "org.openstack__1__os_version": "12.04",
    "os_distro": "ubuntu",
    "os_type": "linux",
    "protected": false,
    "schema": "/v2/schemas/image",
    "self": "/v2/images/c9c7732f-5129-4930-a835-3781255fb1e2",
    "size": 647449489,
    "status": "active",
    "tags": [],
    "updated_at": "2014-03-26T21:44:54Z",
    "visibility": "public",
    "vm_mode": "hvm"
}
                    </programlisting>
                </example>
            </step>
        </procedure>
    </section>
    <section xml:id="update-image" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
        xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
        <title>Update an image</title>
        <para>If you need to change certain details about an image, such as adding, removing, or modifying image properties,
            you can update that image. For more information about how to update images by using the HTTP PATCH method and how
            to use the request body parameters (<parameter>op</parameter>, <parameter>path</parameter>, and
                <parameter>value</parameter>), see
            <link xlink:href="http://docs.rackspace.com/images/api/v2/ci-devguide/content/patch-method.html">HTTP PATCH Method</link>
            in the <citetitle>Cloud Images Developer Guide</citetitle>. For more information about which properties can be
            updated, see
            <link xlink:href="http://docs.rackspace.com/images/api/v2/ci-devguide/content/PATCH_updateImage_images__image_id__Image_Calls.html">
                Update Image</link>
            in the <citetitle>Cloud Images Developer Guide</citetitle>.</para>
        <procedure>
            <title>To update an image with cURL</title>
            <step>
                <para>Issue the following cURL command to update an image. In this example, you are changing the name of
                    image <literal>c9c7732f-5129-4930-a835-3781255fb1e2</literal> from <literal>Ubuntu 12.04 LTS (Precise
                        Pangolin) (PVHVM)</literal> to <literal>My Favorite Ubuntu</literal>.</para>
                <programlisting>
curl -s https://iad.images.api.rackspacecloud.com/v2/$account/images/c9c7732f-5129-4930-a835-3781255fb1e2 \
-X PATCH \
-d'{{"op": "replace", "path": "/name", "value": "My Favorite Ubuntu"}}' \
-H "Content-Type: application/json" -H "X-Auth-Token: $token" \
-H "Accept: application/openstack-images-v2.1-json-patch" |python -m json.tool
                </programlisting>
                <para><emphasis role="bold">Options:</emphasis>
                    <itemizedlist>
                        <listitem>
                            <para><emphasis role="bold">-X</emphasis>: Identifies the HTTP command. If no <code>-X</code>
                                parameter is specified, the default is &GET;.</para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">-s</emphasis>: Runs the command in silent mode.</para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">-H</emphasis>: Specified header information. In this case, it
                                provides the content type, the authentication token, and the special format for the response
                                body (<literal>application/openstack-images-v2.1-json-patch</literal> instead of
                                    <literal>application/json</literal>). If you previously exported the token environment
                                variable as instructed in <olink targetdoc="ci-gettingstarted" targetptr="export_env_vars"
                                    >“Exporting environment variables”</olink>, you can use the $token variable. Otherwise,
                                substitute your actual token for the variable. To learn more about the response body format,
                                see
                                <link xlink:href="http://docs-internal.rackspace.com/images/api/v2/ci-devguide/content/patch-method.html">
                                      2.4. HTTP PATCH method</link>
                                in the <citetitle>Cloud Images Developer Guide</citetitle></para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">-d</emphasis>: Specifies the JSON request body.</para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">-m json.tool</emphasis>: Specifies json.tool, which pretty-prints the
                                JSON output. For more information about json.tool, see <olink targetdoc="ci-gettingstarted"
                                    targetptr="json_tool">json.tool</olink>.</para>
                        </listitem>
                    </itemizedlist>
                </para>
                <para>The command returns the following response.</para>
                <example>
                    <title>Update an image with cURL response</title>
                    <programlisting language="json">
{
    "id":"c9c7732f-5129-4930-a835-3781255fb1e2",
    "name":"My Favorite Ubuntu",
    "status":"queued",
    "visibility":"public",
    "tags": [],
    "created_at":"2012-08-11T17:15:52Z",
    "updated_at":"2012-08-11T17:15:52Z",
    "self":"/v2/images/c9c7732f-5129-4930-a835-3781255fb1e2",
    "file":"/v2/images/c9c7732f-5129-4930-a835-3781255fb1e2/file",
    "schema":"/v2/schemas/image"
}
                    </programlisting>
                </example>
            </step>
        </procedure>
    </section>
    <section xml:id="import-image" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
        xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
        <title>Import an image by using tasks</title>
        <para>To import an image to the &CImS; so that it is available to use and to share, create an import task. For more
            information about image tasks, see <olink targetdoc="ci-gettingstarted" targetptr="image-tasks">“Asynchronous
                Image Tasks”</olink>.</para>
        <procedure>
            <title>To import an image with cURL</title>
            <step>
                <para>Issue the following cURL command to create a task to import an image. In this example, the source file
                    for the <literal>my-excellent-image.vhd</literal> image, is in the <literal>exports</literal> directory
                    on your Cloud Files account.</para>
                <programlisting>
curl -s https://iad.images.api.rackspacecloud.com/v2/$account/tasks \
-X POST \
-d '{"type": "import","input":{"image_properties": {"name": "My excellent custom image"},"import_from": "exports/my-excellent-image.vhd"}}' \
-H "Content-Type: application/json" -H "X-Auth-Token: $token" |python -m json.tool
                </programlisting>
                <para><emphasis role="bold">Options:</emphasis>
                    <itemizedlist>
                        <listitem>
                            <para><emphasis role="bold">-X</emphasis>: Identifies the HTTP command. If no <code>-X</code>
                                parameter is specified, the default is &GET;.</para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">-s</emphasis>: Runs the command in silent mode.</para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">-H</emphasis>: Specified header information. In this case, it
                                provides the content type and the authentication token. If you previously exported the token
                                environment variable as instructed in <olink targetdoc="ci-gettingstarted"
                                    targetptr="export_env_vars">“Exporting environment variables”</olink>, you can use the
                                $token variable. Otherwise, substitute your actual token for the variable.</para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">-d</emphasis>: Specifies the JSON request body.</para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">-m json.tool</emphasis>: Specifies json.tool, which pretty-prints the
                                JSON output. For more information about json.tool, see <olink targetdoc="ci-gettingstarted"
                                    targetptr="json_tool">json.tool</olink>.</para>
                        </listitem>
                    </itemizedlist>
                </para>
                <para>The command returns the following response.</para>
                <example>
                    <title>Import an image with cURL response</title>
                    <programlisting language="json">
{
    "created_at": "2014-02-26T02:58:46Z",
    "id": "fc29a67c-ad76-49bc-a317-a5f38dcb44c0",
    "input": {
        "image_properties": {
            "name": "My excellent custom image"
        },
        "import_from": "exports/my-excellent-image.vhd"
    },
    "message": "None",
    "owner": "00000123",
    "schema": "/v2/schemas/task",
    "self": "/v2/tasks/fc29a67c-ad76-49bc-a317-a5f38dcb44c0",
    "status": "pending",
    "type": "import",
    "updated_at": "2014-02-26T02:58:46Z"
}
                    </programlisting>
                </example>
            </step>
            <step>
                <para>Note the task ID in the <parameter>id</parameter> parameter (in this example,
                        <literal>fc29a67c-ad76-49bc-a317-a5f38dcb44c0</literal>), so you can poll the status of the task by
                    using the instructions in <olink targetdoc="ci-gettingstarted" targetptr="get-task-details">“Get Details
                        for a Task”</olink> until the task succeeds or fails.</para>
            </step>
        </procedure>
    </section>
    <section xml:id="export-image" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
        xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
        <title>Export an image by using tasks</title>
        <para>To export an image from the &CImS; so that you can store a copy offline, create an export task. For more
            information about image tasks, see <olink targetdoc="ci-gettingstarted" targetptr="image-tasks">“Asynchronous
                Image Tasks”</olink>.</para>
        <procedure>
            <title>To export an image with cURL</title>
            <step>
                <para>Issue the following cURL command to create a task to export the image. In this example, the image
                        <literal>ca5e7f11-5d57-4dd7-8ace-03ab647fe6c6</literal> is exported to the <literal>exports</literal>
                    directory on your Cloud Files account.</para>
                <programlisting>
curl -s https://iad.images.api.rackspacecloud.com/v2/$account/tasks \
-X POST \
-d '{"type": "export","input":{"image_uuid": "ca5e7f11-5d57-4dd7-8ace-03ab647fe6c6","receiving_swift_container": "exports"}}' \
-H "Content-Type: application/json" -H "X-Auth-Token: $token" |python -m json.tool
                </programlisting>
                <para><emphasis role="bold">Options:</emphasis>
                    <itemizedlist>
                        <listitem>
                            <para><emphasis role="bold">-X</emphasis>: Identifies the HTTP command. If no <code>-X</code>
                                parameter is specified, the default is &GET;.</para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">-s</emphasis>: Runs the command in silent mode.</para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">-H</emphasis>: Specified header information. In this case, it
                                provides the content type and the authentication token. If you previously exported the token
                                environment variable as instructed in <olink targetdoc="ci-gettingstarted"
                                    targetptr="export_env_vars">“Exporting environment variables”</olink>, you can use the
                                $token variable. Otherwise, substitute your actual token for the variable.</para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">-d</emphasis>: Specifies the JSON request body.</para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">-m json.tool</emphasis>: Specifies json.tool, which pretty-prints the
                                JSON output. For more information about json.tool, see <olink targetdoc="ci-gettingstarted"
                                    targetptr="json_tool">json.tool</olink>.</para>
                        </listitem>
                    </itemizedlist>
                </para>
                <para>The command returns the following response.</para>
                <example>
                    <title>Export an image with cURL response</title>
                    <programlisting language="json">
{
    "created_at": "2014-02-26T02:01:13Z",
    "id": "7bdc8ede-9098-4d79-9477-697f586cb333",
    "input":{
        "image_uuid": "ca5e7f11-5d57-4dd7-8ace-03ab647fe6c6",
        "receiving_swift_container": "exports"
    },
    "message": "None",
    "owner": "00000123",
    "schema": "/v2/schemas/task",
    "self": "/v2/tasks/7bdc8ede-9098-4d79-9477-697f586cb333",
    "status": "pending",
    "type": "export",
    "updated_at": "2014-02-26T02:01:13Z"
}
                    </programlisting>
                </example>
            </step>
            <step>
                <para>Note the task ID in the <parameter>id</parameter> parameter (in this example,
                        <literal>7bdc8ede-9098-4d79-9477-697f586cb333</literal>), so you can poll the status of the task by
                    using the instructions in <olink targetdoc="ci-gettingstarted" targetptr="get-task-details">“Get Details
                        for a Task”</olink> until the task succeeds or fails.</para>
            </step>
        </procedure>
    </section>
    <section xml:id="get-task-details" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
        xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
        <title>Get details for a task</title>
        <para>To find when an import or export task finishes and whether it worked, get the details for that task.</para>
        <procedure>
            <title>To get details for a task with cURL</title>
            <step>
                <para>Issue the following cURL command to get details for an import task, by using the task ID that you got
                    from importing or exporting an image. In this example, you poll task
                        <literal>fc29a67c-ad76-49bc-a317-a5f38dcb44c0</literal> and get a status of
                        <literal>pending</literal>. If you continue polling, you will eventually get a status of
                        <literal>success</literal> or <literal>failure</literal>.</para>
                <programlisting>
curl -s https://iad.images.api.rackspacecloud.com/v2/$account/tasks/fc29a67c-ad76-49bc-a317-a5f38dcb44c0  \
-H "X-Auth-Token: $token" |python -m json.tool
                </programlisting>
                <para><emphasis role="bold">Options:</emphasis>
                    <itemizedlist>
                        <listitem>
                            <para><emphasis role="bold">-s</emphasis>: Runs the command in silent mode.</para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">-H</emphasis>: Specified header information. In this case, it
                                provides the authentication token. If you previously exported the token environment variable
                                as instructed in <olink targetdoc="ci-gettingstarted" targetptr="export_env_vars">“Exporting
                                    environment variables”</olink>, you can use the $token variable. Otherwise, substitute
                                your actual token for the variable.</para>
                        </listitem>
                        <listitem>
                            <para><emphasis role="bold">-m json.tool</emphasis>: Specifies json.tool, which pretty-prints the
                                JSON output. For more information about json.tool, see <olink targetdoc="ci-gettingstarted"
                                    targetptr="json_tool">json.tool</olink>.</para>
                        </listitem>
                    </itemizedlist>
                </para>
                <para>The command returns the following responses.</para>
                <example>
                    <title>Get details for a task with cURL response (pending)</title>
                    <programlisting language="json">
{
    "created_at": "2014-02-26T02:58:46Z",
    "id": "fc29a67c-ad76-49bc-a317-a5f38dcb44c0",
    "input": {
        "image_properties": {
            "name": "My excellent custom image"
        },
        "import_from": "exports/my-excellent-image.vhd"
    },
    "message": "None",
    "owner": "00000123",
    "schema": "/v2/schemas/task",
    "self": "/v2/tasks/fc29a67c-ad76-49bc-a317-a5f38dcb44c0",
    "status": "pending",
    "type": "import",
    "updated_at": "2014-02-26T02:58:46Z"
}
                    </programlisting>
                </example>
            </step>
            <step>
                <para>Until the status is either <literal>success</literal> or <literal>failure</literal>, continue to
                    reissue the operation.</para>
                <para>When an import task completes successfully, note the image ID so that you can share it or use it to
                    boot a server. In this example, the image ID is
                    <literal>1d944ab7-6748-4f3c-b7e2-3553bf006677</literal>.</para>
                <example>
                    <title>Get details for an import task with cURL response (success)</title>
                    <programlisting language="json">
{
    "created_at": "2014-02-26T03:02:23Z",
    "expires_at": "2014-02-28T03:28:18Z",
    "id": "d8dd8c24-2534-473c-881f-9097bc784068",
    "input": {
        "image_properties": {
            "name": "My excellent custom image"
        },
        "import_from": "exports/my-excellent-image.vhd"
    },
    "message": "None",
    "owner": "00000123",
    "result": {
        "image_id": "1d944ab7-6748-4f3c-b7e2-3553bf006677"
    },
    "schema": "/v2/schemas/task",
    "self": "/v2/tasks/d8dd8c24-2534-473c-881f-9097bc784068",
    "status": "success",
    "type": "import",
    "updated_at": "2014-02-26T03:28:18Z"
}
                    </programlisting>
                </example>
                <para>When an export task completes successfully, note the export_location so that you can find the image
                    file in your Cloud Files account. In this example, the export_location is
                        <literal>exports/ca5e7f11-5d57-4dd7-8ace-03ab647fe6c6.vhd</literal>.</para>
                <example>
                    <title>Get details for an export task with cURL response (success)</title>
                    <programlisting language="json">
{
    "created_at": "2014-02-26T02:01:13Z",
    "expires_at": "2014-02-28T02:16:50Z",
    "id": "7bdc8ede-9098-4d79-9477-697f586cb333",
    "input":{
        "image_uuid": "ca5e7f11-5d57-4dd7-8ace-03ab647fe6c6",
        "receiving_swift_container": "exports"
    },
    "message": "None",
    "owner": "00000123",
    "result":{
        "export_location": "exports/ca5e7f11-5d57-4dd7-8ace-03ab647fe6c6.vhd"
    },
    "schema": "/v2/schemas/task",
    "self": "/v2/tasks/7bdc8ede-9098-4d79-9477-697f586cb333",
    "status": "success",
    "type": "export",
    "updated_at": "2014-02-26T02:16:50Z"
}
                    </programlisting>
                </example>
            </step>
        </procedure>
    </section>
</section>
